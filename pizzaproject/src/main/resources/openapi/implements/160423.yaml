openapi: 3.0.0

info:
  title: Pizza project API
  version: 1.0.0
  description: |
    Pizza API allows you to remotely manage the pizzeria.
    ### Check out its awesome features:
    * Authorization is required to work with the API. Authorization is done by the bearer-token ðŸ˜Ž


servers:
  - url: http://localhost:8090/
paths:
  /api/auth/login:
    post:
      description: Get jwt-token
      summary: Authorization method
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password

      responses:
        200:
          description: successful authorization
          content:
            application/json:
              schema:
                properties:
                  jwt-token:
                    type: string
        401:
          description: Authentication failed
  /api/auth/signup:
    post:
      summary: Registration new user
      description: Get jwt-token
      tags:
        - Auth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                - username
                - password
                - email
      responses:
        200:
          description: Succsessful create new user
          content:
            application/json:
              schema:
                properties:
                  jwt-token:
                    type: string

  /api/users/all:
    get:
      summary: Get all users
      tags:
        - Users
      operationId: get all users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '401':
          description: Access denied

  /api/users/{id}:
    get:
      summary: Get user
      description: Get one by id
      tags:
        - Users
      operationId: get user
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200' :
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

        '401':
          description: Access denied
        '404':
          description: Request failed - No items
  /api/users/edit:
    patch:
      summary: Change users info
      tags:
        - Users
      operationId: update user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                - username
                - password
                - email
      responses:
        200 :
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    jwt-token:
                      type: string
                      example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJVc2VyIGRldGFpbHMiLGHpc3MiOiJQaXp6YSBhcHAiLCJleHAiOjE2ODE2MzU5NzgsImlhdCI6MTY4MTYzMjM3OCwidXNlcm5hbWUiOiJ0ZXN0In0.XvbElw5HT59q8aEPIEOm7wgbuIMou3_WfcogK4gJ__I'
                    updated data user:
                      type: string
                      example: 'newUserName : newUserEmail'
        404:
          description: Invalid data
        401:
          description: Access denied
  /api/users/favorites/{id}:
    get:
      description: Show list of favorite pizzas
      summary: Get list of Pizzas
      tags:
        - Users
      operationId: Get favorites
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200 :
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pizza'
        404:
          description: Bad request parametr
        401:
          description: Access denied
  /api/pizza/all:
    get:
      summary: Get all users
      tags:
        - Pizza
      operationId: get all pizzas
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pizza'
        '401':
          description: Access denied
  /api/pizza/{id}:
    get:
      summary: Get pizza
      description: Get one by id
      tags:
        - Pizza
      operationId: get pizza
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200' :
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pizza'

        '401':
          description: Access denied
        '404':
          description: Request failed - No items

  /api/cafe/all:
    get:
      summary: Get all cafes
      tags:
        - Cafe
      operationId: get all cafes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cafe'
        '401':
          description: Access denied
  /api/cafe/{cafeId}:
    get:
      summary: Get cafe
      description: Get one by id
      tags:
        - Cafe
      operationId: get cafe
      parameters:
        - $ref: '#/components/parameters/cafeId'
      responses:
        '200' :
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cafe'
        '401':
          description: Access denied
        '404':
          description: Request failed - No items
  /api/cafe/add:
    get:
      summary: Create new Cafe
      description: create new cafe
      tags:
        - Cafe
      operationId: create cafe
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'Pizza house'
                adress:
                  type: string
                  example: 'Magdeburg, Lange str. 20'
                email:
                  type: string
                  example: 'pizza_info@pizza.net'
                phone:
                  type: string
                  example: '+49-151-111-222-33'
                open_at:
                  type: string
                  example: '8:00'
                close_at:
                  type: string
                  example: '20:00'
                image:
                  type: string
                  example: 'c_cafe1.jpg'
              required:
                - title
                - adress
                - email
                - phone
                - open_at
                - close_at
      responses:
        '200' :
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cafe'
        '401':
          description: Access denied
        '404':
          description: Request failed - No items
  /api/cafe/menu/{cafeId}:
    get:
      description: Show list of cafe pizzas
      summary: Get list of Pizzas
      tags:
        - Cafe
      operationId: Get menu
      parameters:
        - $ref: '#/components/parameters/cafeId'
      responses:
        200 :
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pizza'
        404:
          description: Bad request parametr
        401:
          description: Access denied
  /api/cafe/menu/add/{cafeId}/{pizzaId}:
    post:
      description: Add pizza to cafes menu
      summary: Add pizza to menu
      tags:
        - Cafe
      operationId: Add to menu
      parameters:
        - $ref: '#/components/parameters/cafeId'
        - $ref: '#/components/parameters/pizzaId'
      responses:
        200 :
          description: OK
        404:
          description: Bad request parametr
        401:
          description: Access denied
  /api/cafe/menu/remove/{cafeId}/{pizzaId}:
    post:
      description: Remove pizza from cafes menu
      summary: Remove pizza from menu
      tags:
        - Cafe
      operationId: Remove from menu
      parameters:
        - $ref: '#/components/parameters/cafeId'
        - $ref: '#/components/parameters/pizzaId'
      responses:
        200 :
          description: OK
        404:
          description: Bad request parametr
        401:
          description: Access denied
  /api/ingredients/all:
    get:
      summary: Get all ingredients
      tags:
        - Ingredients
      operationId: get all ingredients
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '401':
          description: Access denied
  /api/ingredients/{id}:
    get:
      summary: Get ingredient
      description: Get one by id
      tags:
        - Ingredients
      operationId: get ingredient
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200' :
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '401':
          description: Access denied
        '404':
          description: Request failed - No items
  /api/ingredients/add:
    post:
      summary: Add ingredient
      description: Add ingredient
      tags:
        - Ingredients
      operationId: add ingredient
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Royal Cheese'
                price:
                  type: number
                  example: '3.50'
                type_id:
                  type: integer
                  example: 3
                image:
                  type: string
                  example: 'royal_chesse.jpg'
              required:
                - name
                - price
                - type_id
      responses:
        '200' :
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '401':
          description: Access denied
        '404':
          description: Request failed - bad data




components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    id:
      in: path
      name: id
      required: true
      description: record id
      schema:
        type: integer
    pizzaId:
      in: path
      name: pizzaId
      required: true
      description: pizza id
      schema:
        type: integer
    cafeId:
      in: path
      name: cafeId
      required: true
      description: cafe id
      schema:
        type: integer
  schemas:
    Person:
      type: object
      required:
        - username
        - password
        - email
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "John Smith"
        password:
          type: string
        email:
          type: string
          example: "test@email.com"
    Persons:
      type: array
      items:
        $ref: '#/components/schemas/Person'
    Base:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Thin crust'
        size:
          type: string
          example: 'Small'
        price:
          type: number
          example: '3.50'
    TypeOfInredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Meat'
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          example: 32
        name:
          type: string
          example: 'Bacon'
        price:
          type: number
          example: '4.50'
        image:
          type: string
          example: 'i_bacon.jpg'
        type:
          $ref: '#/components/schemas/TypeOfInredient'

    Pizza:
      type: object
      properties:
        id:
          type: integer
          example: 2
        name:
          type: string
          example: 'Margarita S'
        price:
          type: number
          example: '15.50'
        base:
          $ref: '#/components/schemas/Base'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        image:
          type: string
          example: 'p_margarita.png'
    Cafe:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 'Pizza house'
        adress:
          type: string
          example: 'Magdeburg, Lange str. 20'
        email:
          type: string
          example: 'pizza_info@pizza.net'
        phone:
          type: string
          example: '+49-151-111-222-33'
        open_at:
          type: string
          example: '8:00'
        close_at:
          type: string
          example: '20:00'
        image:
          type: string
          example: 'c_cafe1.jpg'


security:
  - bearerAuth: []

